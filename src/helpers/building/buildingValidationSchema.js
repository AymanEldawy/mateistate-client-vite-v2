import { object, z } from "zod"
import { FLATS } from "./buildingHelpers";
import { BUILDING_STEPS } from "./buildingSteps";

export const buildingDefaultValues = {
  apartment_count: 0,
  apartment_floor: 0,
  area: null,
  bank_account_number: null,
  basin_number: null,
  bond_date: null,
  bond_number: null,
  bond_type: null,
  building_bank_account_id: null,
  building_cash_account_id: null,
  building_cheque_account_id: null,
  building_cost: null,
  building_deposit_account_id: null,
  building_discount_account_id: null,
  building_insurance_account_id: null,
  building_number: null,
  building_receipt: null,
  building_revenue_account_id: null,
  city: null,
  commission_expense_account_id: null,
  commission_rate: null,
  created_at: null,
  customers_main_account_id: null,
  deferred_vat_account_id: null,
  display: null,
  emirate: null,
  entry_commission_from_owner_account_id: null,
  entry_commission_rate: null,
  entry_landlord_account_id: null,
  entry_revenue_account_id: null,
  entry_vat_account_id: null,
  entry_vat_rate: null,
  investment_end_date: null,
  investment_gen_entries: null,
  investment_owner_account_id: null,
  investment_start_date: null,
  investment_value: null,
  lessor_id: null,
  ltnname: null,
  mezzanine_count: 0,
  mezzanine_floor: 0,
  name: null,
  note: null,
  office_count: 0,
  office_floor: 0,
  owner_account_id: null,
  owner_balance: null,
  owner_id: null,
  owner_tax_account_id: null,
  parking_count: 0,
  parking_floor: 0,
  part_number: null,
  penthouse_count: 0,
  penthouse_floor: 0,
  purchase_date: null,
  realestate_company_account_id: null,
  received_account_id: null,
  received_amount: null,
  received_date: null,
  received_note: null,
  renters_insurance: null,
  shop_count: 0,
  statement: null,
  store_count: 0,
  street: null,
  suburb: null,
  supplier_account_id: null,
  tenants: null,
  underground_parking: null,
  vat_account_id: null,
  warehouse_count: 0,
}


export const buildingValidationSchema = (tab, setTab) => {
  return z.object({
    name: z.string().min(1, { message: "building name is required" }),
    apartment_count: z.number().int(),
    apartment_floor: z.number().int(),
    area: z.string().nullable().optional(),
    bank_account_number: z.string().nullable().optional(),
    basin_number: z.string().nullable().optional(),
    bond_date: z.string().nullable().optional(),
    bond_number: z.string().nullable().optional(),
    bond_type: z.string().nullable().optional(),
    building_bank_account_id: z.string().nullable().optional(),
    building_cash_account_id: z.string().nullable().optional(),
    building_cheque_account_id: z.string().nullable().optional(),
    building_cost: z.string().nullable().optional(),
    building_deposit_account_id: z.string().nullable().optional(),
    building_discount_account_id: z.string().nullable().optional(),
    building_insurance_account_id: z.string().nullable().optional(),
    building_number: z.string().nullable().optional(),
    building_receipt: z.string().nullable().optional(),
    building_revenue_account_id: z.string().nullable().optional(),
    city: z.string().nullable().optional(),
    commission_expense_account_id: z.string().nullable().optional(),
    commission_rate: z.string().nullable().optional(),
    created_at: z.string().nullable().optional(),
    customers_main_account_id: z.string().nullable().optional(),
    deferred_vat_account_id: z.string().nullable().optional(),
    display: z.string().nullable().optional(),
    emirate: z.string().nullable().optional(),
    entry_commission_from_owner_account_id: z.string().nullable().optional(),
    entry_commission_rate: z.string().nullable().optional(),
    entry_landlord_account_id: z.string().nullable().optional(),
    entry_revenue_account_id: z.string().nullable().optional(),
    entry_vat_account_id: z.string().nullable().optional(),
    entry_vat_rate: z.string().nullable().optional(),
    investment_end_date: z.string().nullable().optional(),
    investment_gen_entries: z.string().nullable().optional(),
    investment_owner_account_id: z.string().nullable().optional(),
    investment_start_date: z.string().nullable().optional(),
    investment_value: z.string().nullable().optional(),
    lessor_id: z.string().nullable().optional(),
    ltnname: z.string().nullable().optional(),
    mezzanine_count: z.number().int(),
    mezzanine_floor: z.number().int(),
    note: z.string().nullable().optional(),
    office_count: z.number().int(),
    office_floor: z.number().int(),
    owner_account_id: z.string().nullable().optional(),
    owner_balance: z.string().nullable().optional(),
    owner_id: z.string().nullable().optional(),
    owner_tax_account_id: z.string().nullable().optional(),
    parking_count: z.number().int(),
    parking_floor: z.number().int(),
    part_number: z.string().nullable().optional(),
    penthouse_count: z.number().int(),
    penthouse_floor: z.number().int(),
    purchase_date: z.string().nullable().optional(),
    realestate_company_account_id: z.string().nullable().optional(),
    received_account_id: z.string().nullable().optional(),
    received_amount: z.string().nullable().optional(),
    received_date: z.string().nullable().optional(),
    received_note: z.string().nullable().optional(),
    renters_insurance: z.string().nullable().optional(),
    shop_count: z.number().int(),
    statement: z.string().nullable().optional(),
    store_count: z.number().int(),
    street: z.string().nullable().optional(),
    suburb: z.string().nullable().optional(),
    supplier_account_id: z.string().nullable().optional(),
    tenants: z.string().nullable().optional(),
    underground_parking: z.string().nullable().optional(),
    vat_account_id: z.string().nullable().optional(),
    warehouse_count: z.number().int(),
  }).refine((data) => {
    for (const key of Object.keys(FLATS)) {
      if (data[key]) {
        return true
      }
    }
    setTab(BUILDING_STEPS.building_units)
    return false
  }, {
    message: 'units are required',
    path: ['apartment_count'],
  })
}